

# This playbook mainly installs waggle software and is intended to be used to create a waggle OS image (production and/or public Vagrant box)

# The ansible playbooks behave slight different between vagrant and production images. The public vagrant image should not contain a
# registration key, while the private production image will. The default behavior of ansible playbooks is the production use-case, options in Vagrantfile
# change the default behavior.

- name: waggle_os
  hosts: all
  become: yes
  #remote_user: root



  tasks:

  - fail:
      msg: "Only 18.04 and 20.04 supported"
    when: ansible_distribution_version != "20.04" and ansible_distribution_version != "18.04"

  - name: apt-get update
    apt:
      update_cache: yes

  - name: install locales
    apt:
      name:
        - locales
      state: present

  - name: Ensure a locale exists
    community.general.locale_gen:
      name: en_US.UTF-8
      state: present



  - name: Install Systemd packages
    apt:
      name:
        - systemd-sysv
      state: present
    when:
      - use_systemd == "yes"

  - name: Install other ubuntu packages
    apt:
      name:

        - python3
        - openssh-server
      state: present
    #when:
    #  - ansible_distribution_version == "18.04"




        #- ansible  # maybe needed if we run asyncronous (long-running) playbooks locally
        #- dnsmasq (rpi dhcp / pxe booting)
        #- network-manager
        #- nfs-kernel-server (rpi nfs)
        #- openssh-server
        #- rsyslog




  #- name: pip packages
  #  pip:
  #    name: openshift # needed for the community.kubernetes.k8s module

  # TODO remove !?
  - name: Create directory /etc/sage/
    file:
      path: /etc/sage/
      state: directory

  - name: Create directory /etc/waggle/
    file:
      path: /etc/waggle/
      state: directory

  #  motd-news
  - name: check if motd-news file exists
    stat:
      path: /etc/default/motd-news
    register: motd_news

  - name: disable ubuntu motd-news
    lineinfile:
      dest: /etc/default/motd-news
      state: present
      regexp: '^ENABLED='
      line: 'ENABLED=0'
    when: motd_news.stat.exists == true


  - name: Creates directory
    file:
      path: /etc/update-motd.d/
      state: directory
  - name: Copy file with owner and permissions
    copy:
      src: 05-sage
      dest: /etc/update-motd.d/05-sage
      owner: root
      group: root
      mode: '0755'

  # note that further config entries will be added later in the config playbook
  - name: config
    copy:
      dest: "/etc/waggle/config.ini"
      content: |
        # WARNING: Do not edit this file directly, this file is written by an ansible playbook
        [system]
        #name =
        #devmode = true

        [hardware]
        #wlan-interface = wan0
        #wifi-interface = wifi0
        #modem-interface = modem0

        # by default this should be generated from the mac-address of the network device
        # e.g. 0000000000000001
        #node-id-override =

        [network]
        #static-ip-nx = 10.31.81.1

        [registration]
        #host =
        #port = 49190
        user = sage_registration
        key = /etc/waggle/sage_registration
        keycert = /etc/waggle/sage_registration-cert.pub

        [reverse-tunnel]
        #host =
        port = 49190
        key = /etc/waggle/bk_key.pem
        pubkey = /etc/waggle/bk_pubkey.pem

        [watchdog]
        #gpio-export = 232
        #gpio-pin = 3
        #watchdog-sec = 2
        #ssh_ok_file = /run/waggle_ssh_ok

        [psu-control]
        #gpio-clk = 233
        #gpio-ep = 234
        #gpio-ph = 235

        [wagman]
        #gpio-acok3 = 216
        #gpio-pg1 = 217
        #gpio-pg2 = 218
        #gpio-pg3 = 219
        #gpio-pg4 = 220
        #gpio-wake3 = 221
        #gpio-p6 = 222
        #gpio-p7 = 223




# invoke this only in vagrant test environment
- name: beekeeper-config
  import_playbook: deploy_beekeeper_config.yaml
  when: skip_registration_key != "yes"


- name: keys
  import_playbook: deploy_registration_key.yml
  when: skip_registration_key != "yes"

- name: other
  hosts: all
  become: yes

  vars:
    NODE_ID_SERVICE_VERSION: 1.0.7  # see https://github.com/waggle-sensor/waggle-nodeid/releases
    REGISTRATION_VERSION: 2.2.2  # see https://github.com/waggle-sensor/waggle-bk-registration/releases
    REV_TUNNEL_VERSION: 2.3.2  # see https://github.com/waggle-sensor/waggle-bk-reverse-tunnel/releases

    #HOSTNAME_SERVICE: 1.2.0      # see https://github.com/waggle-sensor/node-hostname-service/releases

  tasks:


  # node id service
  - name: Download node id service
    get_url:
       url: "https://github.com/waggle-sensor/waggle-nodeid/releases/download/v{{NODE_ID_SERVICE_VERSION}}/waggle-nodeid_{{NODE_ID_SERVICE_VERSION}}_all.deb"
       dest: "/tmp/waggle-nodeid_{{NODE_ID_SERVICE_VERSION}}_all.deb"
    when: use_systemd == "yes"

  - name: Install node-id service (but do not start)
    apt:
      deb: "/tmp/waggle-nodeid_{{NODE_ID_SERVICE_VERSION}}_all.deb"
    when: use_systemd == "yes"

  # If we do not mask waggle-nodeid.service, this service will start on next boot, and a manual config is too late.
  #- name: Mask waggle-nodeid.service
  #  ansible.builtin.systemd:
  #    name: waggle-nodeid.service
  #    masked: yes
  #  when: nodeid_service_masked == "yes"
  - name: Aggressive way of "masking" waggle-nodeid.service
    shell: |
      mv /etc/systemd/system/waggle-nodeid.service /etc/systemd/system/waggle-nodeid.service_disabled
      systemctl daemon-reload
    when: nodeid_service_masked == "yes" and use_systemd == "yes"

  # hostname service
  #- name: Download hostname service
  #  get_url:
  #     url: "https://github.com/waggle-sensor/node-hostname-service/releases/download/v{{HOSTNAME_SERVICE}}/waggle-node-hostname_{{HOSTNAME_SERVICE}}_all.deb"
  #     dest: "/tmp/waggle-node-hostname_{{HOSTNAME_SERVICE}}_all.deb"

  #- name: Install hostname service (but do not start)
  #  apt:
  #    deb: "/tmp/waggle-node-hostname_{{HOSTNAME_SERVICE}}_all.deb"



  # waggle-registration
  - name: Download waggle-registration service
    get_url:
       url: "https://github.com/waggle-sensor/beekeeper-registration/releases/download/v{{REGISTRATION_VERSION}}/waggle-bk-registration_{{REGISTRATION_VERSION}}_all.deb"
       dest: "/tmp/waggle-bk-registration_{{REGISTRATION_VERSION}}_all.deb"
    when: use_systemd == "yes"

  - name: Install waggle-registration service (but do not start)
    apt:
      deb: "/tmp/waggle-bk-registration_{{REGISTRATION_VERSION}}_all.deb"
    when: use_systemd == "yes"

  # waggle-reverse-tunnel
  - name: Download waggle-reverse-tunnel service
    get_url:
       url: "https://github.com/waggle-sensor/node-reverse-tunnel-service/releases/download/v{{REV_TUNNEL_VERSION}}/waggle-bk-reverse-tunnel_{{REV_TUNNEL_VERSION}}_all.deb"
       dest: "/tmp/waggle-bk-reverse-tunnel_{{REV_TUNNEL_VERSION}}_all.deb"
    when: use_systemd == "yes"

  - name: Install waggle-reverse-tunnel service (but do not start)
    apt:
      deb: "/tmp/waggle-bk-reverse-tunnel_{{REV_TUNNEL_VERSION}}_all.deb"
    when: use_systemd == "yes"



  # TODO remove (this should be in debian package)
  #- name: install kubernetes python lib for sagebk-registration
  #  pip:
  #    name: kubernetes==12.0.1




  - name: waggle-services-list
    copy:
      dest: "/usr/local/bin/waggle-services-list"
      owner: root
      group: root
      mode: '0755'
      content: |
        #!/bin/sh
        systemctl list-units -t service --full --all --plain --no-legend | grep '^\(k3s\|waggle\)'


  - name: Configure sshd
    lineinfile:
      path: "/etc/ssh/sshd_config"
      regex: "^(#)?{{item.key}}"
      line: "{{item.key}} {{item.value}}"
      state: present
    loop:
      - { key: "PermitRootLogin", value: "without-password" }
      - { key: "PasswordAuthentication", value: "no" }

  #- name: workaround
  #  set_fact:
  #    #install_docker: '{{install_docker == "yes"}}'
  #    install_docker: 'no'
  #  delegate_to: localhost
  #  delegate_facts: yes

- hosts: all,localhost
  gather_facts: no
  run_once: True
  tasks:
   - set_fact:
        install_docker_: '{{install_docker == "yes"}}'
        #install_k3s_: '{{install_k3s == "yes"}}'
     delegate_to: localhost
     delegate_facts: yes


 # TODO: (if we keep it) prevent start at this point, start later
- name: docker
  import_playbook: install-docker-playbook.yml
  when: hostvars.localhost.install_docker_



- name: install k3s (do not run yet)
  hosts: all
  become: yes
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

  # https://github.com/rancher/k3s-ansible

  tasks:
    - meta: end_play
      when: install_k3s != "yes"

    - name: install k3s (without starting)
      args:
        warn: false  # ansible is unhappy about curl
      shell: curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--disable=traefik" INSTALL_K3S_VERSION=v1.20.2+k3s1  INSTALL_K3S_SKIP_START=true sh -
      # INSTALL_K3S_SKIP_START this will prevent immediate start of k3s, will start on next boot
      # K3S_CLUSTER_SECRET may be needed

      # see both files for reference (sorry, private repo)
      # https://github.com/waggle-sensor/nx-image/blob/master/Dockerfile.rootfs
      # https://github.com/waggle-sensor/nx-image/blob/master/ROOTFS/etc/systemd/system/k3s.service.d/override.conf

    - name: Create directory /etc/systemd/system/k3s.service.d
      file:
        path: /etc/systemd/system/k3s.service.d
        state: directory

    - name: k3s systemd unit overlay
      copy:
        dest: /etc/systemd/system/k3s.service.d/override.conf
        content: |
          #[Unit]
          #After=waggle-nodeid.service
          #Wants=waggle-nodeid.service

          [Service]
          # Fail service if Node ID file does not exist
          ExecStartPre=/usr/bin/test -s /etc/waggle/node-id
          ExecStart=
          ExecStart=/bin/bash -ce '/usr/local/bin/k3s server --node-name "$(cat /etc/waggle/node-id)"'


    - name: copy kubernetes resource files to node
      copy:
        # ansible expects files in subfolder "files" (which does not exist), but we can get outside using "../"
        src: ../kubernetes
        dest: /opt/waggle/

  #when: hostvars.localhost.install_k3s_
    #when: install_k3s == "yes"



